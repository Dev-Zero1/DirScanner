<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="name.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>